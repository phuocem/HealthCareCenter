import { supabase } from '../api/supabase';

/** üß© T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·∫∑c ƒë·ªãnh vai tr√≤ b√°c sƒ© (role_id = 2) */
export const createUserWithRoleService = async (email, password, fullName, departmentId = null) => {
  // 1Ô∏è‚É£ T·∫°o t√†i kho·∫£n Auth
  const { data: authData, error: authError } = await supabase.auth.admin.createUser({
    email,
    password,
    email_confirm: true,
  });

  if (authError) {
    if (authError.message.includes('already registered')) {
      return { success: false, message: `‚ö†Ô∏è Email ${email} ƒë√£ t·ªìn t·∫°i` };
    }
    throw new Error(authError.message);
  }

  const userId = authData.user.id;

  // 2Ô∏è‚É£ Ki·ªÉm tra user_profiles ƒë√£ t·ªìn t·∫°i ch∆∞a
  const { data: existingProfile } = await supabase
    .from('user_profiles')
    .select('id')
    .eq('id', userId)
    .maybeSingle();

  if (!existingProfile) {
    const { error: profileError } = await supabase
      .from('user_profiles')
      .insert([{ id: userId, full_name: fullName, role_id: 2, department_id: departmentId }]);
    if (profileError) throw new Error(profileError.message);
  }

  // 3Ô∏è‚É£ N·∫øu l√† b√°c sƒ© ‚Üí th√™m v√†o doctors n·∫øu ch∆∞a c√≥
  const { data: existingDoctor } = await supabase
    .from('doctors')
    .select('id')
    .eq('id', userId)
    .maybeSingle();

  if (!existingDoctor) {
    const { error: doctorError } = await supabase
      .from('doctors')
      .insert([{ id: userId, department_id: departmentId }]);
    if (doctorError) throw new Error(doctorError.message);
  }

  return { success: true, message: `‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n b√°c sƒ© cho ${fullName}` };
};
